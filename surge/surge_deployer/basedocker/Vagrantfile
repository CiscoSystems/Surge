

# Copyright 2015 Cisco Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
require 'socket'
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing

$vars = YAML::load_file("pipeline.yml")
$provider = $vars['provider']['type']['docker']
$nodes = $vars['hosts']

$ansible_groups = {}
$hosts = $nodes.keys
start_port = $provider['start_port']
init_port = $provider['start_port']
docker_host_ports = Array []

$hosts.each do | server |
  $ansible_groups.store(server , $nodes[server]["count"])
end


### Check whether ports are open ###
def port_open?(ip, port, timeout)

	start_time = Time.now
	current_time = start_time
  	while (current_time - start_time) <= timeout
		begin
        		 TCPSocket.new(ip, port)
        		 return true
  	        rescue Errno::ECONNREFUSED
    			sleep 0.1
   		end
  		current_time = Time.now
 	end

 	return false

 end

Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  inventory = {}
  $ansible_groups.each do | key , value|

      group_machines = Array[]

      value.times do |k|

          forwarded_ports = Array[]

          if key == "storm-nimbus"

		$storm_port = port_open?("127.0.0.1",8080,0.5)
		if not $storm_port

			forwarded_ports.push("8080:8080")
		else
			puts "Collision in 8080"
			r = Random.new
                	rand_storm = r.rand(10001..20000)
			#puts "Ports in assigned to storm "+rand_storm.to_s
			tmp_port = rand_storm.to_s+":8080"
			forwarded_ports.push(tmp_port)
		end

	  end

	  $port = port_open?("127.0.0.1",init_port,0.5)
	 # puts $port

	 # Check whether port is used
	  while $port do
		puts "port Collision in the rest of the nodes"
	  	r = Random.new
	  	rand_start = r.rand(init_port..10000)
	  	$rand_port = port_open?("127.0.0.1",rand_start,0.5)

	 	if not $rand_port
	   		init_port = rand_start
	  		break
	 		#init_port = init_port + 500
	   	end
         end

          hostname = "#{key}_"+init_port.to_s
          ssh_port = init_port.to_s+":22"
          forwarded_ports.push(ssh_port)
          init_port = init_port + 50
	  group_machines.push(hostname)
	  puts group_machines
          puts forwarded_ports.to_s

           ## Spin up Containers
          config.vm.define hostname do |v|
                v.vm.provider "docker" do |d|
                  d.build_dir = "."
		  d.name = hostname
                  d.has_ssh = true
                  d.ports = forwarded_ports
                  #d.ports = [ssh_port]

                end
              v.ssh.username = "root"
              v.ssh.password = "root"
         end
      end

     inventory.store(key,group_machines)

  end

  config.vm.provision "ansible" do |ansible|
     ansible.groups = inventory
     ansible.playbook = "surge-docker-playbooks/surge.yml"
     ansible.sudo = true
     #ansible.limit = 'all'
     #ansible.verbose  = "vvvv"
  end

end
